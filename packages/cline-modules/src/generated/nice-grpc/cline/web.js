// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: cline/web.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../bufbuild/protobuf/wire";
import { Empty, StringRequest } from "./common";
function createBaseIsImageUrl() {
    return { isImage: false, url: "" };
}
export const IsImageUrl = {
    encode(message, writer = new BinaryWriter()) {
        if (message.isImage !== false) {
            writer.uint32(8).bool(message.isImage);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIsImageUrl();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isImage = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            isImage: isSet(object.isImage) ? globalThis.Boolean(object.isImage) : false,
            url: isSet(object.url) ? globalThis.String(object.url) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.isImage !== false) {
            obj.isImage = message.isImage;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return IsImageUrl.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIsImageUrl();
        message.isImage = object.isImage ?? false;
        message.url = object.url ?? "";
        return message;
    },
};
function createBaseOpenGraphData() {
    return { title: "", description: "", image: "", url: "", siteName: "", type: "" };
}
export const OpenGraphData = {
    encode(message, writer = new BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.image !== "") {
            writer.uint32(26).string(message.image);
        }
        if (message.url !== "") {
            writer.uint32(34).string(message.url);
        }
        if (message.siteName !== "") {
            writer.uint32(42).string(message.siteName);
        }
        if (message.type !== "") {
            writer.uint32(50).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenGraphData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.image = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.siteName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            image: isSet(object.image) ? globalThis.String(object.image) : "",
            url: isSet(object.url) ? globalThis.String(object.url) : "",
            siteName: isSet(object.siteName) ? globalThis.String(object.siteName) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.image !== "") {
            obj.image = message.image;
        }
        if (message.url !== "") {
            obj.url = message.url;
        }
        if (message.siteName !== "") {
            obj.siteName = message.siteName;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        return obj;
    },
    create(base) {
        return OpenGraphData.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOpenGraphData();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.image = object.image ?? "";
        message.url = object.url ?? "";
        message.siteName = object.siteName ?? "";
        message.type = object.type ?? "";
        return message;
    },
};
export const WebServiceDefinition = {
    name: "WebService",
    fullName: "cline.WebService",
    methods: {
        checkIsImageUrl: {
            name: "checkIsImageUrl",
            requestType: StringRequest,
            requestStream: false,
            responseType: IsImageUrl,
            responseStream: false,
            options: {},
        },
        fetchOpenGraphData: {
            name: "fetchOpenGraphData",
            requestType: StringRequest,
            requestStream: false,
            responseType: OpenGraphData,
            responseStream: false,
            options: {},
        },
        openInBrowser: {
            name: "openInBrowser",
            requestType: StringRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
