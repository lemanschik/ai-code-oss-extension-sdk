// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/diff.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../bufbuild/protobuf/wire";
import { Metadata } from "../cline/common";
function createBaseOpenDiffRequest() {
    return { metadata: undefined, path: undefined, content: undefined };
}
export const OpenDiffRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.path !== undefined) {
            writer.uint32(18).string(message.path);
        }
        if (message.content !== undefined) {
            writer.uint32(26).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenDiffRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            path: isSet(object.path) ? globalThis.String(object.path) : undefined,
            content: isSet(object.content) ? globalThis.String(object.content) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.path !== undefined) {
            obj.path = message.path;
        }
        if (message.content !== undefined) {
            obj.content = message.content;
        }
        return obj;
    },
    create(base) {
        return OpenDiffRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOpenDiffRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.path = object.path ?? undefined;
        message.content = object.content ?? undefined;
        return message;
    },
};
function createBaseOpenDiffResponse() {
    return { diffId: undefined };
}
export const OpenDiffResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.diffId !== undefined) {
            writer.uint32(10).string(message.diffId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOpenDiffResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        return obj;
    },
    create(base) {
        return OpenDiffResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOpenDiffResponse();
        message.diffId = object.diffId ?? undefined;
        return message;
    },
};
function createBaseGetDocumentTextRequest() {
    return { metadata: undefined, diffId: undefined };
}
export const GetDocumentTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.diffId !== undefined) {
            writer.uint32(18).string(message.diffId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDocumentTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        return obj;
    },
    create(base) {
        return GetDocumentTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDocumentTextRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.diffId = object.diffId ?? undefined;
        return message;
    },
};
function createBaseGetDocumentTextResponse() {
    return { content: undefined };
}
export const GetDocumentTextResponse = {
    encode(message, writer = new BinaryWriter()) {
        if (message.content !== undefined) {
            writer.uint32(10).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDocumentTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { content: isSet(object.content) ? globalThis.String(object.content) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.content !== undefined) {
            obj.content = message.content;
        }
        return obj;
    },
    create(base) {
        return GetDocumentTextResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetDocumentTextResponse();
        message.content = object.content ?? undefined;
        return message;
    },
};
function createBaseReplaceTextRequest() {
    return { metadata: undefined, diffId: undefined, content: undefined, startLine: undefined, endLine: undefined };
}
export const ReplaceTextRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.diffId !== undefined) {
            writer.uint32(18).string(message.diffId);
        }
        if (message.content !== undefined) {
            writer.uint32(26).string(message.content);
        }
        if (message.startLine !== undefined) {
            writer.uint32(32).int32(message.startLine);
        }
        if (message.endLine !== undefined) {
            writer.uint32(40).int32(message.endLine);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReplaceTextRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.startLine = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.endLine = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
            content: isSet(object.content) ? globalThis.String(object.content) : undefined,
            startLine: isSet(object.startLine) ? globalThis.Number(object.startLine) : undefined,
            endLine: isSet(object.endLine) ? globalThis.Number(object.endLine) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        if (message.content !== undefined) {
            obj.content = message.content;
        }
        if (message.startLine !== undefined) {
            obj.startLine = Math.round(message.startLine);
        }
        if (message.endLine !== undefined) {
            obj.endLine = Math.round(message.endLine);
        }
        return obj;
    },
    create(base) {
        return ReplaceTextRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseReplaceTextRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.diffId = object.diffId ?? undefined;
        message.content = object.content ?? undefined;
        message.startLine = object.startLine ?? undefined;
        message.endLine = object.endLine ?? undefined;
        return message;
    },
};
function createBaseReplaceTextResponse() {
    return {};
}
export const ReplaceTextResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReplaceTextResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ReplaceTextResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseReplaceTextResponse();
        return message;
    },
};
function createBaseScrollDiffRequest() {
    return { diffId: undefined, line: undefined };
}
export const ScrollDiffRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.diffId !== undefined) {
            writer.uint32(10).string(message.diffId);
        }
        if (message.line !== undefined) {
            writer.uint32(16).int32(message.line);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScrollDiffRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.line = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
            line: isSet(object.line) ? globalThis.Number(object.line) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        if (message.line !== undefined) {
            obj.line = Math.round(message.line);
        }
        return obj;
    },
    create(base) {
        return ScrollDiffRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseScrollDiffRequest();
        message.diffId = object.diffId ?? undefined;
        message.line = object.line ?? undefined;
        return message;
    },
};
function createBaseScrollDiffResponse() {
    return {};
}
export const ScrollDiffResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseScrollDiffResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return ScrollDiffResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseScrollDiffResponse();
        return message;
    },
};
function createBaseTruncateDocumentRequest() {
    return { metadata: undefined, diffId: undefined, endLine: undefined };
}
export const TruncateDocumentRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.diffId !== undefined) {
            writer.uint32(18).string(message.diffId);
        }
        if (message.endLine !== undefined) {
            writer.uint32(24).int32(message.endLine);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTruncateDocumentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.endLine = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
            endLine: isSet(object.endLine) ? globalThis.Number(object.endLine) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        if (message.endLine !== undefined) {
            obj.endLine = Math.round(message.endLine);
        }
        return obj;
    },
    create(base) {
        return TruncateDocumentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTruncateDocumentRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.diffId = object.diffId ?? undefined;
        message.endLine = object.endLine ?? undefined;
        return message;
    },
};
function createBaseTruncateDocumentResponse() {
    return {};
}
export const TruncateDocumentResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTruncateDocumentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TruncateDocumentResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTruncateDocumentResponse();
        return message;
    },
};
function createBaseCloseDiffRequest() {
    return { metadata: undefined, diffId: undefined };
}
export const CloseDiffRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.diffId !== undefined) {
            writer.uint32(18).string(message.diffId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloseDiffRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        return obj;
    },
    create(base) {
        return CloseDiffRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCloseDiffRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.diffId = object.diffId ?? undefined;
        return message;
    },
};
function createBaseCloseDiffResponse() {
    return {};
}
export const CloseDiffResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloseDiffResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return CloseDiffResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseCloseDiffResponse();
        return message;
    },
};
function createBaseSaveDocumentRequest() {
    return { metadata: undefined, diffId: undefined };
}
export const SaveDocumentRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.diffId !== undefined) {
            writer.uint32(18).string(message.diffId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSaveDocumentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diffId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.diffId !== undefined) {
            obj.diffId = message.diffId;
        }
        return obj;
    },
    create(base) {
        return SaveDocumentRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSaveDocumentRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.diffId = object.diffId ?? undefined;
        return message;
    },
};
function createBaseSaveDocumentResponse() {
    return {};
}
export const SaveDocumentResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSaveDocumentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return SaveDocumentResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSaveDocumentResponse();
        return message;
    },
};
export const DiffServiceDefinition = {
    name: "DiffService",
    fullName: "host.DiffService",
    methods: {
        /** Open the diff view/editor. */
        openDiff: {
            name: "openDiff",
            requestType: OpenDiffRequest,
            requestStream: false,
            responseType: OpenDiffResponse,
            responseStream: false,
            options: {},
        },
        /** Get the contents of the diff view. */
        getDocumentText: {
            name: "getDocumentText",
            requestType: GetDocumentTextRequest,
            requestStream: false,
            responseType: GetDocumentTextResponse,
            responseStream: false,
            options: {},
        },
        /** Replace a text selection in the diff. */
        replaceText: {
            name: "replaceText",
            requestType: ReplaceTextRequest,
            requestStream: false,
            responseType: ReplaceTextResponse,
            responseStream: false,
            options: {},
        },
        scrollDiff: {
            name: "scrollDiff",
            requestType: ScrollDiffRequest,
            requestStream: false,
            responseType: ScrollDiffResponse,
            responseStream: false,
            options: {},
        },
        /** Truncate the diff document. */
        truncateDocument: {
            name: "truncateDocument",
            requestType: TruncateDocumentRequest,
            requestStream: false,
            responseType: TruncateDocumentResponse,
            responseStream: false,
            options: {},
        },
        /** Save the diff document. */
        saveDocument: {
            name: "saveDocument",
            requestType: SaveDocumentRequest,
            requestStream: false,
            responseType: SaveDocumentResponse,
            responseStream: false,
            options: {},
        },
        /** Close the diff editor UI. */
        closeDiff: {
            name: "closeDiff",
            requestType: CloseDiffRequest,
            requestStream: false,
            responseType: CloseDiffResponse,
            responseStream: false,
            options: {},
        },
    },
};
export const DiffServiceService = {
    /** Open the diff view/editor. */
    openDiff: {
        path: "/host.DiffService/openDiff",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(OpenDiffRequest.encode(value).finish()),
        requestDeserialize: (value) => OpenDiffRequest.decode(value),
        responseSerialize: (value) => Buffer.from(OpenDiffResponse.encode(value).finish()),
        responseDeserialize: (value) => OpenDiffResponse.decode(value),
    },
    /** Get the contents of the diff view. */
    getDocumentText: {
        path: "/host.DiffService/getDocumentText",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(GetDocumentTextRequest.encode(value).finish()),
        requestDeserialize: (value) => GetDocumentTextRequest.decode(value),
        responseSerialize: (value) => Buffer.from(GetDocumentTextResponse.encode(value).finish()),
        responseDeserialize: (value) => GetDocumentTextResponse.decode(value),
    },
    /** Replace a text selection in the diff. */
    replaceText: {
        path: "/host.DiffService/replaceText",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(ReplaceTextRequest.encode(value).finish()),
        requestDeserialize: (value) => ReplaceTextRequest.decode(value),
        responseSerialize: (value) => Buffer.from(ReplaceTextResponse.encode(value).finish()),
        responseDeserialize: (value) => ReplaceTextResponse.decode(value),
    },
    scrollDiff: {
        path: "/host.DiffService/scrollDiff",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(ScrollDiffRequest.encode(value).finish()),
        requestDeserialize: (value) => ScrollDiffRequest.decode(value),
        responseSerialize: (value) => Buffer.from(ScrollDiffResponse.encode(value).finish()),
        responseDeserialize: (value) => ScrollDiffResponse.decode(value),
    },
    /** Truncate the diff document. */
    truncateDocument: {
        path: "/host.DiffService/truncateDocument",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(TruncateDocumentRequest.encode(value).finish()),
        requestDeserialize: (value) => TruncateDocumentRequest.decode(value),
        responseSerialize: (value) => Buffer.from(TruncateDocumentResponse.encode(value).finish()),
        responseDeserialize: (value) => TruncateDocumentResponse.decode(value),
    },
    /** Save the diff document. */
    saveDocument: {
        path: "/host.DiffService/saveDocument",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(SaveDocumentRequest.encode(value).finish()),
        requestDeserialize: (value) => SaveDocumentRequest.decode(value),
        responseSerialize: (value) => Buffer.from(SaveDocumentResponse.encode(value).finish()),
        responseDeserialize: (value) => SaveDocumentResponse.decode(value),
    },
    /** Close the diff editor UI. */
    closeDiff: {
        path: "/host.DiffService/closeDiff",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CloseDiffRequest.encode(value).finish()),
        requestDeserialize: (value) => CloseDiffRequest.decode(value),
        responseSerialize: (value) => Buffer.from(CloseDiffResponse.encode(value).finish()),
        responseDeserialize: (value) => CloseDiffResponse.decode(value),
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
