import { Anthropic } from "../../anthropic-ai/sdk";
import { ClineIgnoreController } from "../ignore/ClineIgnoreController";
import { Mode } from "../../shared/storage/types";
export declare const formatResponse: {
    duplicateFileReadNotice: () => string;
    contextTruncationNotice: () => string;
    condense: () => string;
    toolDenied: () => string;
    toolError: (error?: string) => string;
    clineIgnoreError: (path: string) => string;
    noToolsUsed: () => string;
    tooManyMistakes: (feedback?: string) => string;
    autoApprovalMaxReached: (feedback?: string) => string;
    missingToolParameterError: (paramName: string) => string;
    invalidMcpToolArgumentError: (serverName: string, toolName: string) => string;
    toolResult: (text: string, images?: string[], fileString?: string) => string | Array<Anthropic.TextBlockParam | Anthropic.ImageBlockParam>;
    imageBlocks: (images?: string[]) => Anthropic.ImageBlockParam[];
    formatFilesList: (absolutePath: string, files: string[], didHitLimit: boolean, clineIgnoreController?: ClineIgnoreController) => string;
    createPrettyPatch: (filename?: string, oldStr?: string, newStr?: string) => string;
    taskResumption: (mode: Mode, agoText: string, cwd: string, wasRecent: boolean | 0 | undefined, responseText?: string, hasPendingFileContextWarnings?: boolean) => [string, string];
    planModeInstructions: () => string;
    fileEditWithUserChanges: (relPath: string, userEdits: string, autoFormattingEdits: string | undefined, finalContent: string | undefined, newProblemsMessage: string | undefined) => string;
    fileEditWithoutUserChanges: (relPath: string, autoFormattingEdits: string | undefined, finalContent: string | undefined, newProblemsMessage: string | undefined) => string;
    diffError: (relPath: string, originalContent: string | undefined) => string;
    toolAlreadyUsed: (toolName: string) => string;
    clineIgnoreInstructions: (content: string) => string;
    clineRulesGlobalDirectoryInstructions: (globalClineRulesFilePath: string, content: string) => string;
    clineRulesLocalDirectoryInstructions: (cwd: string, content: string) => string;
    clineRulesLocalFileInstructions: (cwd: string, content: string) => string;
    windsurfRulesLocalFileInstructions: (cwd: string, content: string) => string;
    cursorRulesLocalFileInstructions: (cwd: string, content: string) => string;
    cursorRulesLocalDirectoryInstructions: (cwd: string, content: string) => string;
    fileContextWarning: (editedFiles: string[]) => string;
};
