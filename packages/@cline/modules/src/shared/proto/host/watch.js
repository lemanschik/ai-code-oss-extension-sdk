// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/watch.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../bufbuild/protobuf/wire";
import { Metadata } from "../cline/common";
export var FileChangeEvent_ChangeType;
(function (FileChangeEvent_ChangeType) {
    FileChangeEvent_ChangeType[FileChangeEvent_ChangeType["CREATED"] = 0] = "CREATED";
    FileChangeEvent_ChangeType[FileChangeEvent_ChangeType["CHANGED"] = 1] = "CHANGED";
    FileChangeEvent_ChangeType[FileChangeEvent_ChangeType["DELETED"] = 2] = "DELETED";
    FileChangeEvent_ChangeType[FileChangeEvent_ChangeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(FileChangeEvent_ChangeType || (FileChangeEvent_ChangeType = {}));
export function fileChangeEvent_ChangeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CREATED":
            return FileChangeEvent_ChangeType.CREATED;
        case 1:
        case "CHANGED":
            return FileChangeEvent_ChangeType.CHANGED;
        case 2:
        case "DELETED":
            return FileChangeEvent_ChangeType.DELETED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return FileChangeEvent_ChangeType.UNRECOGNIZED;
    }
}
export function fileChangeEvent_ChangeTypeToJSON(object) {
    switch (object) {
        case FileChangeEvent_ChangeType.CREATED:
            return "CREATED";
        case FileChangeEvent_ChangeType.CHANGED:
            return "CHANGED";
        case FileChangeEvent_ChangeType.DELETED:
            return "DELETED";
        case FileChangeEvent_ChangeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSubscribeToFileRequest() {
    return { metadata: undefined, path: "" };
}
export const SubscribeToFileRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.path !== "") {
            writer.uint32(18).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSubscribeToFileRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            path: isSet(object.path) ? globalThis.String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.path !== "") {
            obj.path = message.path;
        }
        return obj;
    },
    create(base) {
        return SubscribeToFileRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSubscribeToFileRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.path = object.path ?? "";
        return message;
    },
};
function createBaseFileChangeEvent() {
    return { path: "", type: 0, content: "" };
}
export const FileChangeEvent = {
    encode(message, writer = new BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileChangeEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            path: isSet(object.path) ? globalThis.String(object.path) : "",
            type: isSet(object.type) ? fileChangeEvent_ChangeTypeFromJSON(object.type) : 0,
            content: isSet(object.content) ? globalThis.String(object.content) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.path !== "") {
            obj.path = message.path;
        }
        if (message.type !== 0) {
            obj.type = fileChangeEvent_ChangeTypeToJSON(message.type);
        }
        if (message.content !== "") {
            obj.content = message.content;
        }
        return obj;
    },
    create(base) {
        return FileChangeEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileChangeEvent();
        message.path = object.path ?? "";
        message.type = object.type ?? 0;
        message.content = object.content ?? "";
        return message;
    },
};
export const WatchServiceDefinition = {
    name: "WatchService",
    fullName: "host.WatchService",
    methods: {
        /** Subscribe to file changes */
        subscribeToFile: {
            name: "subscribeToFile",
            requestType: SubscribeToFileRequest,
            requestStream: false,
            responseType: FileChangeEvent,
            responseStream: true,
            options: {},
        },
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
