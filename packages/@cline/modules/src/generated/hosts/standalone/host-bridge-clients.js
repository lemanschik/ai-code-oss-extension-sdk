// GENERATED CODE -- DO NOT EDIT!
// Generated by scripts/generate-host-bridge-client.mjs
import { asyncIteratorToCallbacks } from "../../../standalone/utils";
import * as niceGrpc from "../../nice-grpc/index";
import { createClient } from "nice-grpc";
import { BaseGrpcClient } from "../../../hosts/external/grpc-types";
/**
 * Type-safe client implementation for DiffService.
 */
export class DiffServiceClientImpl extends BaseGrpcClient {
    createClient(channel) {
        return createClient(niceGrpc.host.DiffServiceDefinition, channel);
    }
    openDiff(request) {
        return this.makeRequest((client) => client.openDiff(request));
    }
    getDocumentText(request) {
        return this.makeRequest((client) => client.getDocumentText(request));
    }
    replaceText(request) {
        return this.makeRequest((client) => client.replaceText(request));
    }
    scrollDiff(request) {
        return this.makeRequest((client) => client.scrollDiff(request));
    }
    truncateDocument(request) {
        return this.makeRequest((client) => client.truncateDocument(request));
    }
    saveDocument(request) {
        return this.makeRequest((client) => client.saveDocument(request));
    }
    closeDiff(request) {
        return this.makeRequest((client) => client.closeDiff(request));
    }
}
/**
 * Type-safe client implementation for EnvService.
 */
export class EnvServiceClientImpl extends BaseGrpcClient {
    createClient(channel) {
        return createClient(niceGrpc.host.EnvServiceDefinition, channel);
    }
    clipboardWriteText(request) {
        return this.makeRequest((client) => client.clipboardWriteText(request));
    }
    clipboardReadText(request) {
        return this.makeRequest((client) => client.clipboardReadText(request));
    }
}
/**
 * Type-safe client implementation for WatchService.
 */
export class WatchServiceClientImpl extends BaseGrpcClient {
    createClient(channel) {
        return createClient(niceGrpc.host.WatchServiceDefinition, channel);
    }
    subscribeToFile(request, callbacks) {
        const client = this.getClient();
        const abortController = new AbortController();
        const stream = client.subscribeToFile(request, {
            signal: abortController.signal,
        });
        const wrappedCallbacks = {
            ...callbacks,
            onError: (error) => {
                if (error?.code === "UNAVAILABLE") {
                    this.destroyClient();
                }
                callbacks.onError?.(error);
            },
        };
        asyncIteratorToCallbacks(stream, wrappedCallbacks);
        return () => {
            abortController.abort();
        };
    }
}
/**
 * Type-safe client implementation for WindowService.
 */
export class WindowServiceClientImpl extends BaseGrpcClient {
    createClient(channel) {
        return createClient(niceGrpc.host.WindowServiceDefinition, channel);
    }
    showTextDocument(request) {
        return this.makeRequest((client) => client.showTextDocument(request));
    }
    showOpenDialogue(request) {
        return this.makeRequest((client) => client.showOpenDialogue(request));
    }
    showMessage(request) {
        return this.makeRequest((client) => client.showMessage(request));
    }
    showInputBox(request) {
        return this.makeRequest((client) => client.showInputBox(request));
    }
    showSaveDialog(request) {
        return this.makeRequest((client) => client.showSaveDialog(request));
    }
    openFile(request) {
        return this.makeRequest((client) => client.openFile(request));
    }
    getOpenTabs(request) {
        return this.makeRequest((client) => client.getOpenTabs(request));
    }
    getVisibleTabs(request) {
        return this.makeRequest((client) => client.getVisibleTabs(request));
    }
}
/**
 * Type-safe client implementation for WorkspaceService.
 */
export class WorkspaceServiceClientImpl extends BaseGrpcClient {
    createClient(channel) {
        return createClient(niceGrpc.host.WorkspaceServiceDefinition, channel);
    }
    getWorkspacePaths(request) {
        return this.makeRequest((client) => client.getWorkspacePaths(request));
    }
    saveOpenDocumentIfDirty(request) {
        return this.makeRequest((client) => client.saveOpenDocumentIfDirty(request));
    }
}
