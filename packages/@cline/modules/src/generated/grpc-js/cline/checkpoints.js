// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: cline/checkpoints.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../bufbuild/protobuf/wire";
import { Empty, Int64Request, Metadata } from "./common";
function createBaseCheckpointRestoreRequest() {
    return { metadata: undefined, number: 0, restoreType: "", offset: undefined };
}
export const CheckpointRestoreRequest = {
    encode(message, writer = new BinaryWriter()) {
        if (message.metadata !== undefined) {
            Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        if (message.number !== 0) {
            writer.uint32(16).int64(message.number);
        }
        if (message.restoreType !== "") {
            writer.uint32(26).string(message.restoreType);
        }
        if (message.offset !== undefined) {
            writer.uint32(32).int64(message.offset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCheckpointRestoreRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.number = longToNumber(reader.int64());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.restoreType = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.offset = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
            number: isSet(object.number) ? globalThis.Number(object.number) : 0,
            restoreType: isSet(object.restoreType) ? globalThis.String(object.restoreType) : "",
            offset: isSet(object.offset) ? globalThis.Number(object.offset) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = Metadata.toJSON(message.metadata);
        }
        if (message.number !== 0) {
            obj.number = Math.round(message.number);
        }
        if (message.restoreType !== "") {
            obj.restoreType = message.restoreType;
        }
        if (message.offset !== undefined) {
            obj.offset = Math.round(message.offset);
        }
        return obj;
    },
    create(base) {
        return CheckpointRestoreRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCheckpointRestoreRequest();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? Metadata.fromPartial(object.metadata)
            : undefined;
        message.number = object.number ?? 0;
        message.restoreType = object.restoreType ?? "";
        message.offset = object.offset ?? undefined;
        return message;
    },
};
export const CheckpointsServiceDefinition = {
    name: "CheckpointsService",
    fullName: "cline.CheckpointsService",
    methods: {
        checkpointDiff: {
            name: "checkpointDiff",
            requestType: Int64Request,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
        checkpointRestore: {
            name: "checkpointRestore",
            requestType: CheckpointRestoreRequest,
            requestStream: false,
            responseType: Empty,
            responseStream: false,
            options: {},
        },
    },
};
export const CheckpointsServiceService = {
    checkpointDiff: {
        path: "/cline.CheckpointsService/checkpointDiff",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(Int64Request.encode(value).finish()),
        requestDeserialize: (value) => Int64Request.decode(value),
        responseSerialize: (value) => Buffer.from(Empty.encode(value).finish()),
        responseDeserialize: (value) => Empty.decode(value),
    },
    checkpointRestore: {
        path: "/cline.CheckpointsService/checkpointRestore",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(CheckpointRestoreRequest.encode(value).finish()),
        requestDeserialize: (value) => CheckpointRestoreRequest.decode(value),
        responseSerialize: (value) => Buffer.from(Empty.encode(value).finish()),
        responseDeserialize: (value) => Empty.decode(value),
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
