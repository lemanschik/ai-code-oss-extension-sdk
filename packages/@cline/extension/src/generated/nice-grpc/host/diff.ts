// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/diff.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "../../../bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Metadata } from "../cline/common";

export interface OpenDiffRequest {
  metadata?:
    | Metadata
    | undefined;
  /** The absolute path of the document being edited. */
  path?:
    | string
    | undefined;
  /** The new content for the file. */
  content?: string | undefined;
}

export interface OpenDiffResponse {
  /** A unique identifier for the diff view that was opened. */
  diffId?: string | undefined;
}

export interface GetDocumentTextRequest {
  metadata?: Metadata | undefined;
  diffId?: string | undefined;
}

export interface GetDocumentTextResponse {
  content?: string | undefined;
}

export interface ReplaceTextRequest {
  metadata?: Metadata | undefined;
  diffId?: string | undefined;
  content?: string | undefined;
  startLine?: number | undefined;
  endLine?: number | undefined;
}

export interface ReplaceTextResponse {
}

export interface ScrollDiffRequest {
  diffId?: string | undefined;
  line?: number | undefined;
}

export interface ScrollDiffResponse {
}

export interface TruncateDocumentRequest {
  metadata?: Metadata | undefined;
  diffId?: string | undefined;
  endLine?: number | undefined;
}

export interface TruncateDocumentResponse {
}

export interface CloseDiffRequest {
  metadata?: Metadata | undefined;
  diffId?: string | undefined;
}

export interface CloseDiffResponse {
}

export interface SaveDocumentRequest {
  metadata?: Metadata | undefined;
  diffId?: string | undefined;
}

export interface SaveDocumentResponse {
}

function createBaseOpenDiffRequest(): OpenDiffRequest {
  return { metadata: undefined, path: undefined, content: undefined };
}

export const OpenDiffRequest: MessageFns<OpenDiffRequest> = {
  encode(message: OpenDiffRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.path !== undefined) {
      writer.uint32(18).string(message.path);
    }
    if (message.content !== undefined) {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenDiffRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenDiffRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenDiffRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      path: isSet(object.path) ? globalThis.String(object.path) : undefined,
      content: isSet(object.content) ? globalThis.String(object.content) : undefined,
    };
  },

  toJSON(message: OpenDiffRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.path !== undefined) {
      obj.path = message.path;
    }
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    return obj;
  },

  create(base?: DeepPartial<OpenDiffRequest>): OpenDiffRequest {
    return OpenDiffRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpenDiffRequest>): OpenDiffRequest {
    const message = createBaseOpenDiffRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.path = object.path ?? undefined;
    message.content = object.content ?? undefined;
    return message;
  },
};

function createBaseOpenDiffResponse(): OpenDiffResponse {
  return { diffId: undefined };
}

export const OpenDiffResponse: MessageFns<OpenDiffResponse> = {
  encode(message: OpenDiffResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.diffId !== undefined) {
      writer.uint32(10).string(message.diffId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OpenDiffResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOpenDiffResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OpenDiffResponse {
    return { diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined };
  },

  toJSON(message: OpenDiffResponse): unknown {
    const obj: any = {};
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    return obj;
  },

  create(base?: DeepPartial<OpenDiffResponse>): OpenDiffResponse {
    return OpenDiffResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OpenDiffResponse>): OpenDiffResponse {
    const message = createBaseOpenDiffResponse();
    message.diffId = object.diffId ?? undefined;
    return message;
  },
};

function createBaseGetDocumentTextRequest(): GetDocumentTextRequest {
  return { metadata: undefined, diffId: undefined };
}

export const GetDocumentTextRequest: MessageFns<GetDocumentTextRequest> = {
  encode(message: GetDocumentTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.diffId !== undefined) {
      writer.uint32(18).string(message.diffId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentTextRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
    };
  },

  toJSON(message: GetDocumentTextRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentTextRequest>): GetDocumentTextRequest {
    return GetDocumentTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentTextRequest>): GetDocumentTextRequest {
    const message = createBaseGetDocumentTextRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.diffId = object.diffId ?? undefined;
    return message;
  },
};

function createBaseGetDocumentTextResponse(): GetDocumentTextResponse {
  return { content: undefined };
}

export const GetDocumentTextResponse: MessageFns<GetDocumentTextResponse> = {
  encode(message: GetDocumentTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== undefined) {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDocumentTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDocumentTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDocumentTextResponse {
    return { content: isSet(object.content) ? globalThis.String(object.content) : undefined };
  },

  toJSON(message: GetDocumentTextResponse): unknown {
    const obj: any = {};
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDocumentTextResponse>): GetDocumentTextResponse {
    return GetDocumentTextResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDocumentTextResponse>): GetDocumentTextResponse {
    const message = createBaseGetDocumentTextResponse();
    message.content = object.content ?? undefined;
    return message;
  },
};

function createBaseReplaceTextRequest(): ReplaceTextRequest {
  return { metadata: undefined, diffId: undefined, content: undefined, startLine: undefined, endLine: undefined };
}

export const ReplaceTextRequest: MessageFns<ReplaceTextRequest> = {
  encode(message: ReplaceTextRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.diffId !== undefined) {
      writer.uint32(18).string(message.diffId);
    }
    if (message.content !== undefined) {
      writer.uint32(26).string(message.content);
    }
    if (message.startLine !== undefined) {
      writer.uint32(32).int32(message.startLine);
    }
    if (message.endLine !== undefined) {
      writer.uint32(40).int32(message.endLine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceTextRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceTextRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startLine = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endLine = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReplaceTextRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
      content: isSet(object.content) ? globalThis.String(object.content) : undefined,
      startLine: isSet(object.startLine) ? globalThis.Number(object.startLine) : undefined,
      endLine: isSet(object.endLine) ? globalThis.Number(object.endLine) : undefined,
    };
  },

  toJSON(message: ReplaceTextRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    if (message.startLine !== undefined) {
      obj.startLine = Math.round(message.startLine);
    }
    if (message.endLine !== undefined) {
      obj.endLine = Math.round(message.endLine);
    }
    return obj;
  },

  create(base?: DeepPartial<ReplaceTextRequest>): ReplaceTextRequest {
    return ReplaceTextRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReplaceTextRequest>): ReplaceTextRequest {
    const message = createBaseReplaceTextRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.diffId = object.diffId ?? undefined;
    message.content = object.content ?? undefined;
    message.startLine = object.startLine ?? undefined;
    message.endLine = object.endLine ?? undefined;
    return message;
  },
};

function createBaseReplaceTextResponse(): ReplaceTextResponse {
  return {};
}

export const ReplaceTextResponse: MessageFns<ReplaceTextResponse> = {
  encode(_: ReplaceTextResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReplaceTextResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReplaceTextResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ReplaceTextResponse {
    return {};
  },

  toJSON(_: ReplaceTextResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ReplaceTextResponse>): ReplaceTextResponse {
    return ReplaceTextResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ReplaceTextResponse>): ReplaceTextResponse {
    const message = createBaseReplaceTextResponse();
    return message;
  },
};

function createBaseScrollDiffRequest(): ScrollDiffRequest {
  return { diffId: undefined, line: undefined };
}

export const ScrollDiffRequest: MessageFns<ScrollDiffRequest> = {
  encode(message: ScrollDiffRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.diffId !== undefined) {
      writer.uint32(10).string(message.diffId);
    }
    if (message.line !== undefined) {
      writer.uint32(16).int32(message.line);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScrollDiffRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScrollDiffRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.line = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScrollDiffRequest {
    return {
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
      line: isSet(object.line) ? globalThis.Number(object.line) : undefined,
    };
  },

  toJSON(message: ScrollDiffRequest): unknown {
    const obj: any = {};
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    if (message.line !== undefined) {
      obj.line = Math.round(message.line);
    }
    return obj;
  },

  create(base?: DeepPartial<ScrollDiffRequest>): ScrollDiffRequest {
    return ScrollDiffRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScrollDiffRequest>): ScrollDiffRequest {
    const message = createBaseScrollDiffRequest();
    message.diffId = object.diffId ?? undefined;
    message.line = object.line ?? undefined;
    return message;
  },
};

function createBaseScrollDiffResponse(): ScrollDiffResponse {
  return {};
}

export const ScrollDiffResponse: MessageFns<ScrollDiffResponse> = {
  encode(_: ScrollDiffResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScrollDiffResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScrollDiffResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ScrollDiffResponse {
    return {};
  },

  toJSON(_: ScrollDiffResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ScrollDiffResponse>): ScrollDiffResponse {
    return ScrollDiffResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ScrollDiffResponse>): ScrollDiffResponse {
    const message = createBaseScrollDiffResponse();
    return message;
  },
};

function createBaseTruncateDocumentRequest(): TruncateDocumentRequest {
  return { metadata: undefined, diffId: undefined, endLine: undefined };
}

export const TruncateDocumentRequest: MessageFns<TruncateDocumentRequest> = {
  encode(message: TruncateDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.diffId !== undefined) {
      writer.uint32(18).string(message.diffId);
    }
    if (message.endLine !== undefined) {
      writer.uint32(24).int32(message.endLine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TruncateDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTruncateDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endLine = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TruncateDocumentRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
      endLine: isSet(object.endLine) ? globalThis.Number(object.endLine) : undefined,
    };
  },

  toJSON(message: TruncateDocumentRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    if (message.endLine !== undefined) {
      obj.endLine = Math.round(message.endLine);
    }
    return obj;
  },

  create(base?: DeepPartial<TruncateDocumentRequest>): TruncateDocumentRequest {
    return TruncateDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TruncateDocumentRequest>): TruncateDocumentRequest {
    const message = createBaseTruncateDocumentRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.diffId = object.diffId ?? undefined;
    message.endLine = object.endLine ?? undefined;
    return message;
  },
};

function createBaseTruncateDocumentResponse(): TruncateDocumentResponse {
  return {};
}

export const TruncateDocumentResponse: MessageFns<TruncateDocumentResponse> = {
  encode(_: TruncateDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TruncateDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTruncateDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): TruncateDocumentResponse {
    return {};
  },

  toJSON(_: TruncateDocumentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<TruncateDocumentResponse>): TruncateDocumentResponse {
    return TruncateDocumentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<TruncateDocumentResponse>): TruncateDocumentResponse {
    const message = createBaseTruncateDocumentResponse();
    return message;
  },
};

function createBaseCloseDiffRequest(): CloseDiffRequest {
  return { metadata: undefined, diffId: undefined };
}

export const CloseDiffRequest: MessageFns<CloseDiffRequest> = {
  encode(message: CloseDiffRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.diffId !== undefined) {
      writer.uint32(18).string(message.diffId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseDiffRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseDiffRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CloseDiffRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
    };
  },

  toJSON(message: CloseDiffRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    return obj;
  },

  create(base?: DeepPartial<CloseDiffRequest>): CloseDiffRequest {
    return CloseDiffRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CloseDiffRequest>): CloseDiffRequest {
    const message = createBaseCloseDiffRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.diffId = object.diffId ?? undefined;
    return message;
  },
};

function createBaseCloseDiffResponse(): CloseDiffResponse {
  return {};
}

export const CloseDiffResponse: MessageFns<CloseDiffResponse> = {
  encode(_: CloseDiffResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CloseDiffResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCloseDiffResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CloseDiffResponse {
    return {};
  },

  toJSON(_: CloseDiffResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CloseDiffResponse>): CloseDiffResponse {
    return CloseDiffResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CloseDiffResponse>): CloseDiffResponse {
    const message = createBaseCloseDiffResponse();
    return message;
  },
};

function createBaseSaveDocumentRequest(): SaveDocumentRequest {
  return { metadata: undefined, diffId: undefined };
}

export const SaveDocumentRequest: MessageFns<SaveDocumentRequest> = {
  encode(message: SaveDocumentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    if (message.diffId !== undefined) {
      writer.uint32(18).string(message.diffId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveDocumentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveDocumentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.diffId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveDocumentRequest {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      diffId: isSet(object.diffId) ? globalThis.String(object.diffId) : undefined,
    };
  },

  toJSON(message: SaveDocumentRequest): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.diffId !== undefined) {
      obj.diffId = message.diffId;
    }
    return obj;
  },

  create(base?: DeepPartial<SaveDocumentRequest>): SaveDocumentRequest {
    return SaveDocumentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SaveDocumentRequest>): SaveDocumentRequest {
    const message = createBaseSaveDocumentRequest();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.diffId = object.diffId ?? undefined;
    return message;
  },
};

function createBaseSaveDocumentResponse(): SaveDocumentResponse {
  return {};
}

export const SaveDocumentResponse: MessageFns<SaveDocumentResponse> = {
  encode(_: SaveDocumentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveDocumentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveDocumentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SaveDocumentResponse {
    return {};
  },

  toJSON(_: SaveDocumentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SaveDocumentResponse>): SaveDocumentResponse {
    return SaveDocumentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SaveDocumentResponse>): SaveDocumentResponse {
    const message = createBaseSaveDocumentResponse();
    return message;
  },
};

/** Provides methods for diff views. */
export type DiffServiceDefinition = typeof DiffServiceDefinition;
export const DiffServiceDefinition = {
  name: "DiffService",
  fullName: "host.DiffService",
  methods: {
    /** Open the diff view/editor. */
    openDiff: {
      name: "openDiff",
      requestType: OpenDiffRequest,
      requestStream: false,
      responseType: OpenDiffResponse,
      responseStream: false,
      options: {},
    },
    /** Get the contents of the diff view. */
    getDocumentText: {
      name: "getDocumentText",
      requestType: GetDocumentTextRequest,
      requestStream: false,
      responseType: GetDocumentTextResponse,
      responseStream: false,
      options: {},
    },
    /** Replace a text selection in the diff. */
    replaceText: {
      name: "replaceText",
      requestType: ReplaceTextRequest,
      requestStream: false,
      responseType: ReplaceTextResponse,
      responseStream: false,
      options: {},
    },
    scrollDiff: {
      name: "scrollDiff",
      requestType: ScrollDiffRequest,
      requestStream: false,
      responseType: ScrollDiffResponse,
      responseStream: false,
      options: {},
    },
    /** Truncate the diff document. */
    truncateDocument: {
      name: "truncateDocument",
      requestType: TruncateDocumentRequest,
      requestStream: false,
      responseType: TruncateDocumentResponse,
      responseStream: false,
      options: {},
    },
    /** Save the diff document. */
    saveDocument: {
      name: "saveDocument",
      requestType: SaveDocumentRequest,
      requestStream: false,
      responseType: SaveDocumentResponse,
      responseStream: false,
      options: {},
    },
    /** Close the diff editor UI. */
    closeDiff: {
      name: "closeDiff",
      requestType: CloseDiffRequest,
      requestStream: false,
      responseType: CloseDiffResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface DiffServiceImplementation<CallContextExt = {}> {
  /** Open the diff view/editor. */
  openDiff(request: OpenDiffRequest, context: CallContext & CallContextExt): Promise<DeepPartial<OpenDiffResponse>>;
  /** Get the contents of the diff view. */
  getDocumentText(
    request: GetDocumentTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDocumentTextResponse>>;
  /** Replace a text selection in the diff. */
  replaceText(
    request: ReplaceTextRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ReplaceTextResponse>>;
  scrollDiff(
    request: ScrollDiffRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ScrollDiffResponse>>;
  /** Truncate the diff document. */
  truncateDocument(
    request: TruncateDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<TruncateDocumentResponse>>;
  /** Save the diff document. */
  saveDocument(
    request: SaveDocumentRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SaveDocumentResponse>>;
  /** Close the diff editor UI. */
  closeDiff(request: CloseDiffRequest, context: CallContext & CallContextExt): Promise<DeepPartial<CloseDiffResponse>>;
}

export interface DiffServiceClient<CallOptionsExt = {}> {
  /** Open the diff view/editor. */
  openDiff(request: DeepPartial<OpenDiffRequest>, options?: CallOptions & CallOptionsExt): Promise<OpenDiffResponse>;
  /** Get the contents of the diff view. */
  getDocumentText(
    request: DeepPartial<GetDocumentTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDocumentTextResponse>;
  /** Replace a text selection in the diff. */
  replaceText(
    request: DeepPartial<ReplaceTextRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ReplaceTextResponse>;
  scrollDiff(
    request: DeepPartial<ScrollDiffRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ScrollDiffResponse>;
  /** Truncate the diff document. */
  truncateDocument(
    request: DeepPartial<TruncateDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<TruncateDocumentResponse>;
  /** Save the diff document. */
  saveDocument(
    request: DeepPartial<SaveDocumentRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SaveDocumentResponse>;
  /** Close the diff editor UI. */
  closeDiff(request: DeepPartial<CloseDiffRequest>, options?: CallOptions & CallOptionsExt): Promise<CloseDiffResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
