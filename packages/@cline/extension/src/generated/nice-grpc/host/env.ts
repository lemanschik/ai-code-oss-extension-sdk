// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: host/env.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Empty, EmptyRequest, String, StringRequest } from "../cline/common";

/** Provides methods for working with the user's environment. */
export type EnvServiceDefinition = typeof EnvServiceDefinition;
export const EnvServiceDefinition = {
  name: "EnvService",
  fullName: "host.EnvService",
  methods: {
    /** Writes text to the system clipboard. */
    clipboardWriteText: {
      name: "clipboardWriteText",
      requestType: StringRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
    /** Reads text from the system clipboard. */
    clipboardReadText: {
      name: "clipboardReadText",
      requestType: EmptyRequest,
      requestStream: false,
      responseType: String,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EnvServiceImplementation<CallContextExt = {}> {
  /** Writes text to the system clipboard. */
  clipboardWriteText(request: StringRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
  /** Reads text from the system clipboard. */
  clipboardReadText(request: EmptyRequest, context: CallContext & CallContextExt): Promise<DeepPartial<String>>;
}

export interface EnvServiceClient<CallOptionsExt = {}> {
  /** Writes text to the system clipboard. */
  clipboardWriteText(request: DeepPartial<StringRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
  /** Reads text from the system clipboard. */
  clipboardReadText(request: DeepPartial<EmptyRequest>, options?: CallOptions & CallOptionsExt): Promise<String>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;
